
@{
    ViewData["Title"] = "BruteForceTesting";
}

<link rel="stylesheet" href="https://pyscript.net/alpha/pyscript.css" />
<script defer src="https://pyscript.net/alpha/pyscript.js"></script>

<h1>Brute Force Calculator</h1>

<div id="WE_BruteForceSection" class="WE_Section WE_BruteForce">
    <p>
        Brute Force Attacks are a common form of cyber attack. A hacker will will attempt to guess your password using an algorithm that will iterate through as many combinations
        as possible with the goal of eventually getting access to your account.
    </p>
    <p>
        Different Brute Force Attack methods:
    </p>
    <ul>
        <li>
            Quickly testing combinations of random characters at increasing volumes.
        </li>
         <li>
            Recycling combinations of usernames and passwords from other sources, and iterating through each of them at a rapid pace.
        </li>
        <li>
            Iterating through a list of users and attempting a single common passphrase.
        </li>
    </ul>
    <p>
        Brute force attacks specialize in targeting users with passwords that are simple, common and reused. In order to counterract this attack, users should take advantage of the
        following practices:
    </p>
    <ul>
        <li>
            Create passwords that use special characters, are of a substantial length, and do not include common phrases (like password, test, etc)
        </li>
        <li>
            Take advantage of secondary authentication measures, such as 2-Factor-Authentication.
        </li>
         <li>
            Avoiding the reuse of passwords to prevent an attacker from accessing anything else in the event of a successful breach.
        </li>
    </ul>
</div>

<div id="WE_BruteForceSection" class="WE_Section WE_BruteForce">
    <p>Enter a phrase here. It will be run processed through a variety of brute force algortithms to test the complexity of the phrase.</p>
    <input id="BruteForcePhrase" type="text" name="BruteForcePasscode" value="" /><br />
    <button id="submit-button" type="submit" pys-onClick="test_password">Test</button>
</div>

<div id="WE_Results" class="WE_Section WE_BruteForce">
  
    <py-script>

        import random
        import time
        import json

        word_order = ["t", "p"]

        # Currently trying words starting with this letter in word list
        current_letter = word_order[0]
        # Index of current word withing its letter's section
        current_letter_index = 0

        guesses = 0

        current_guess = 0

        all_guesses = 0

        reps = [0,1]

        status = "ongoing"

        password_length_to_start = 1

        password_length = password_length_to_start

        password_length_to_generate = 3

        words_list = json.loads('[{"p": ["password"], "t": ["test"]}]')[0]

        def test_password(*args, **kwargs):
          global current_guess, status, current_letter, current_letter_index, guesses, all_guesses
          target_password = str(Element('BruteForcePhrase').element.value)

          digits = {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0}

          total_time = 0.0

 
          status = "ongoing"

          current_letter = word_order[0]
          current_letter_index = 0

          if target_password == "":
            reps[0] += 1
            status = "stopped"
            print(status)

          this_time = time.time()
          guesses = 0
          while status == "ongoing":
                guesses+=1
                generate_dictionary_word(target_password)
                if current_guess == target_password:
                    elapsed = time.time() - this_time
                    status = "Cracked"
                    pyscript.write("WE_Results", status + ": " + current_guess)
                    pyscript.write("WE_Results",str(guesses + 1) + " guesses, " + str(elapsed) + " seconds.\n___________\n")
                    all_guesses += guesses
                    total_time += elapsed

        def generate_dictionary_word(target_password):
          global current_guess, status, current_letter, current_letter_index, guesses, all_guesses

          if len(words_list[current_letter]) > 0:
            current_guess = words_list[current_letter][current_letter_index]

            if current_letter_index < (len(words_list[current_letter]) - 1):
              current_letter_index+=1

            else:
              if word_order.index(current_letter) < (len(word_order) - 1):
                current_letter = word_order[word_order.index(current_letter) + 1]
                current_letter_index = 0
                print(current_letter)

              else:
                status = "not_found"
                print("DONE: " + current_letter)
                all_guesses += (guesses + 1)
                guesses = 0

       </py-script>
  
</div>

